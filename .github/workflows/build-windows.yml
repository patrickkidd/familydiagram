name: Build Windows

on:
  push:
    branches:
      - 2.0.0
    # tags:
    #   - 'v*.*.b*'
  # workflow_run:
  #   workflows: ["Test-noops"]
  #   types:
  #     - completed

jobs:
  build-windows:
    runs-on: windows-2019

    env:
      TWINE_REPOSITORY_URL: "${{ secrets.TWINE_REPOSITORY_URL }}"
      TWINE_USERNAME: "${{ secrets.TWINE_USERNAME }}"
      TWINE_PASSWORD: "${{ secrets.TWINE_PASSWORD }}"
      FD_BUILD_APPLE_ID: "${{ secrets.FD_BUILD_APPLE_ID }}"
      FD_BUILD_APPLE_ID_PASSWORD: "${{ secrets.FD_BUILD_APPLE_ID_PASSWORD }}"
      FD_BUILD_PROVISIONING_PROFILE_BASE64: "${{ secrets.FD_BUILD_PROVISIONING_PROFILE_BASE64 }}"
      FD_BUILD_CERTIFICATE_BASE64: "${{ secrets.FD_BUILD_CERTIFICATE_BASE64 }}"
      FD_BUILD_PRIVATE_KEY_BASE64: "${{ secrets.FD_BUILD_PRIVATE_KEY_BASE64 }}"
      FD_BUILD_CERTIFICATE_PASSWORD: "${{ secrets.FD_BUILD_CERTIFICATE_PASSWORD }}"
      FD_BUILD_AC_AUTH_KEY_ID: "${{ secrets.FD_BUILD_AC_AUTH_KEY_ID }}"
      FD_BUILD_AC_AUTH_KEY_BASE64: "${{ secrets.FD_BUILD_AC_AUTH_KEY_BASE64 }}"
      FD_BUILD_AC_AUTH_KEY_ISSUER: "${{ secrets.FD_BUILD_AC_AUTH_KEY_ISSUER }}"
      FD_BUILD_PEPPER: "${{ secrets.FD_BUILD_PEPPER }}"
      FD_BUILD_BUGSNAG_API_KEY: "${{ secrets.FD_BUILD_BUGSNAG_API_KEY }}"

    steps:

    ## Environment

    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python 3.10.4
      uses: actions/setup-python@v2
      with:
        python-version: 3.10.4
        # cache: 'pipenv'
    - run: |
        pip install pipenv
        mkdir .venv
        # rm Pipfile.lock
        pipenv --clear
        pipenv install --dev --verbose

    # - name: Install Chocolatey
    #   run: |
    #     Set-ExecutionPolicy Bypass -Scope Process -Force; `
    #     [System.Net.ServicePointManager]::SecurityProtocol = `
    #     [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; `
    #     iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))

    # Needed?
    - name: Install 7zip
      run: choco install 7zip -y

    - name: pipenv install aqtinstall
      run: pipenv install aqtinstall

    - name: Install Qt
      run: |
        pipenv run aqt install-qt windows desktop 5.15.2 win64_msvc2019_64 --outputdir C:\Qt --archives qtbase qtdeclarative qtgraphicaleffects qtimageformats qtquickcontrols qtquickcontrols2 qttools qtwinextras

    ## App
    
    - name: Setup _pkdiagram caching
      id: cache-_pkdiagram
      uses: actions/cache@v2
      with:
        path: |
          pkdiagram/_pkdiagram/build
        key: _pkdiagram-${{ runner.os }}-${{ hashFiles('./pkdiagram/_pkdiagram/sip/*.sip', './pkdiagram/_pkdiagram/*.h', './pkdiagram/_pkdiagram/*.cpp') }}
    
    - name: sip-build for _pkdiagram
      if: steps.cache-_pkdiagram.outputs.cache-hit != 'true'
      run: |
        call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
        set PATH=C:\Qt\5.15.2\msvc2019_64\bin;%PATH%
        qmake --version
        cd pkdiagram/_pkdiagram
        pipenv run sip-build --no-compile
        moc -o build/_pkdiagram/moc_unsafearea.cpp unsafearea.h
        moc -o build/_pkdiagram/moc__pkdiagram.cpp _pkdiagram.h
      shell: cmd

    - name: Setup sysroot caching
      id: cache-sysroot
      uses: actions/cache@v2
      with:
        path: ./sysroot/sysroot-win-64
        key: sysroot-win-64
        # key: sysroot-${{ runner.os }}-${{ hashFiles('./sysroot/sysroot.toml') }}
    
    - name: Build sysroot
      if: steps.cache-sysroot.outputs.cache-hit != 'true'
      run: |
        call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
        set PATH=C:\Qt\5.15.2\msvc2019_64\bin;%PATH%
        pipenv run pyqtdeploy-sysroot --verbose sysroot/sysroot.toml
      shell: cmd

    - name: Write build config
      run: |
        call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
        pipenv run python bin\update_build_info.py
      shell: cmd

    - name: pyqtdeploy-build
      run: |
        call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
        set PYTHONPATH=%cd%\lib\site-packages
        pipenv run pyqtdeploy-build --verbose --resources 12 --build-dir build\\win32 --target win-64 familydiagram.pdt
        copy build\common-config\* build\win32\
        copy build\win32-config\* build\win32\
      shell: cmd

    - name: qmake
      run: |
        call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
        set PATH=%cd%\sysroot\sysroot-win-64\Qt\bin;%PATH%
        cd build\win32
        qmake -tp vc "CONFIG-=debug" "CONFIG+=release" "CONFIG+=beta"
      shell: cmd # has to be shell or qmake won't work

    - name: Build
      run: |
        call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
        echo on
        cd build\win32
        msbuild /p:Configuration=Release "Family Diagram.vcxproj"
      shell: cmd
        
    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: familydiagram-windows
        path: build\win32\Release\Family Diagram.exe
