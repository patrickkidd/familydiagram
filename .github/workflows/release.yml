name: Release

on:
  workflow_dispatch:
    inputs:
      release_notes:
        description: "Enter release notes for appcast (multi-line supported)"
        required: false
        type: string
      skip_release:
        description: "Skip the release stage (only build)"
        required: false
        type: boolean
        default: false

  # push:
  #   branches:
  #     - master

env:
  TWINE_REPOSITORY_URL: "${{ secrets.TWINE_REPOSITORY_URL }}"
  TWINE_USERNAME: "${{ secrets.TWINE_USERNAME }}"
  TWINE_PASSWORD: "${{ secrets.TWINE_PASSWORD }}"
  FD_BUILD_DIR: ${{ github.workspace }}/build/osx/Release
  FD_BUILD_KEYCHAIN_NAME: ${{ github.workspace }}/build/osx/Release/build.keychain-db
  FD_BUILD_PROVISIONING_PROFILE_FPATH: ${{ github.workspace }}/build/osx/Release/FD.provisionprofile
  FD_BUILD_CERTIFICATE_FPATH: ${{ github.workspace }}/build/osx/Release/FD_certificate.crt
  FD_BUILD_PRIVATE_KEY_FPATH: ${{ github.workspace }}/build/osx/Release/FD_certificate.pem
  FD_BUILD_AC_AUTH_KEY_FPATH: ${{ github.workspace }}/build/osx/Release/AuthKey_${{ secrets.FD_BUILD_AC_AUTH_KEY_ID }}.p8
  FD_APP_PATH: ${{ github.workspace }}/build/osx/Release/Family\ Diagram.app
  FD_BUILD_APPLE_ID: "${{ secrets.FD_BUILD_APPLE_ID }}"
  FD_BUILD_APPLE_ID_PASSWORD: "${{ secrets.FD_BUILD_APPLE_ID_PASSWORD }}"
  FD_BUILD_PROVISIONING_PROFILE_BASE64: "${{ secrets.FD_BUILD_PROVISIONING_PROFILE_BASE64 }}"
  FD_BUILD_CERTIFICATE_BASE64: "${{ secrets.FD_BUILD_CERTIFICATE_BASE64 }}"
  FD_BUILD_PRIVATE_KEY_BASE64: "${{ secrets.FD_BUILD_PRIVATE_KEY_BASE64 }}"
  FD_BUILD_CERTIFICATE_PASSWORD: "${{ secrets.FD_BUILD_CERTIFICATE_PASSWORD }}"
  FD_BUILD_AC_AUTH_KEY_ID: "${{ secrets.FD_BUILD_AC_AUTH_KEY_ID }}"
  FD_BUILD_AC_AUTH_KEY_BASE64: "${{ secrets.FD_BUILD_AC_AUTH_KEY_BASE64 }}"
  FD_BUILD_AC_AUTH_KEY_ISSUER: "${{ secrets.FD_BUILD_AC_AUTH_KEY_ISSUER }}"
  FD_BUILD_PEPPER: "${{ secrets.FD_BUILD_PEPPER }}"
  FD_BUILD_DATADOG_API_KEY: "${{ secrets.FD_BUILD_DATADOG_API_KEY }}"

jobs:

  setup:
    runs-on: ubuntu-24.04
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    steps:

    - uses: actions/checkout@v4

    - name: Get Version
      id: get-version
      run: |
        echo "version=`python -c "import sys; sys.path.insert(0, './pkdiagram'); import version; print(version.VERSION)"`" >> $GITHUB_OUTPUT

  build-osx:
    # x86 w/ python-3.12.5
    # https://github.com/actions/runner-images/blob/main/images/macos/macos-14-Readme.md
    runs-on: macos-15-intel
    needs: [setup]

    steps:

    # # Will provide an SSH command in the logs that you can use to access the runner.
    # - name: Setup tmate session
    #   uses: mxschmitt/action-tmate@v3

    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.11.6

    - name: Set up virtual env
      run: |
        pip install pipenv
        mkdir .venv
        pipenv --clear
        pipenv install --dev

    # It is faster to install homebrew than to restore from cache
    - name: brew install qt@5 create-dmg
      run: |
        brew install qt@5 create-dmg

    ## App
    
    - name: Setup _pkdiagram caching
      id: cache-_pkdiagram
      uses: actions/cache@v4
      with:
        path: |
          _pkdiagram/build
        key: _pkdiagram-${{ runner.os }}-${{ hashFiles('./_pkdiagram/sip/*.sip', './_pkdiagram/*.h', './_pkdiagram/*.cpp') }}-3.11.6
    
    - name: sip-build for _pkdiagram
      if: steps.cache-_pkdiagram.outputs.cache-hit != 'true'
      run: |
        export PATH="/usr/local/opt/qt@5/bin:${PATH}"
        which qmake
        cd _pkdiagram
        pipenv run sip-build --no-compile
        moc -o build/_pkdiagram/moc_unsafearea.cpp unsafearea.h
        moc -o build/_pkdiagram/moc__pkdiagram.cpp _pkdiagram.h

    - name: Download zlib source
      run: |
        wget -L "https://www.zlib.net/fossils/zlib-1.2.11.tar.gz" -P ./sysroot/

    - name: Setup sysroot caching
      id: cache-sysroot
      uses: actions/cache@v4
      with:
        path: ./sysroot/sysroot-macos-64
        key: sysroot-macos-64-5.15.16--3.11.6
        # key: sysroot-${{ runner.os }}-${{ hashFiles('./sysroot/sysroot.toml') }}


    # # Will provide an SSH command in the logs that you can use to access the runner.
    # - name: Setup tmate session
    #   uses: mxschmitt/action-tmate@v3

    - name: Build sysroot
      if: steps.cache-sysroot.outputs.cache-hit != 'true'
      run: |
        export PATH="/usr/local/opt/qt@5/bin:${PATH}"
        # mkdir -p ~/.pyqtdeploy/cache
        wget -L "https://download.qt.io/official_releases/qt/5.15/5.15.16/single/qt-everywhere-opensource-src-5.15.16.tar.xz" -O sysroot/qt-everywhere-src-5.15.16.tar.xz
        wget https://files.pythonhosted.org/packages/0e/07/c9ed0bd428df6f87183fca565a79fee19fa7c88c7f00a7f011ab4379e77a/PyQt5-5.15.11.tar.gz -O sysroot/PyQt5-5.15.11.tar.gz
        # https://bugreports.qt.io/browse/QTBUG-117225
        # cp sysroot/toolchain-macos-13.prf sysroot/sysroot-macos-64/build/qt-everywhere-src-5.15.2/qtbase/mkspecs/features/toolchain.prf
        pipenv run pyqtdeploy-sysroot --target macos-64 --verbose sysroot/sysroot.toml

    - uses: actions/cache/save@v4
      if: steps.cache-sysroot.outputs.cache-hit != 'true'
      with:
        path: ./sysroot/sysroot-macos-64
        key: sysroot-macos-64-5.15.16--3.11.6

    - name: Write build config
      run: |
        export PATH="`pwd`/sysroot/sysroot-macos-64/Qt/bin:${PATH}"
        pipenv run python bin/update_build_info.py
        pipenv run pyqtdeploy-build --verbose  --resources 12 --target macos-64 --build-dir build/osx familydiagram.pdt
        rsync -avzq build/common-config/* build/osx
        rsync -avzq build/osx-config/* build/osx

    - name: qmake
      run: |
        export PATH="`pwd`/sysroot/sysroot-macos-64/Qt/bin:${PATH}"
        cd build/osx
        qmake -spec macx-xcode CONFIG+=no_autoqmake CONFIG-=debug CONFIG+=release

    - name: Setup provisioning profile
      run: |
        pipenv run ./bin/setup_provisioning_profile.sh

    - name: Update xcode project to new build system
      run: |
        python3 bin/fixup_xcodeproj_workspace.py

    - name: Qt Preprocess
      run: |
        xcodebuild \
          -project build/osx/Family\ Diagram.xcodeproj \
          -target "Qt Preprocess" \
          -configuration Release

    - name: Build App
      run: |
        pipenv run xcodebuild \
          -project build/osx/Family\ Diagram.xcodeproj \
          -scheme "Family Diagram" \
          -configuration Release \
          -archivePath ${FD_BUILD_DIR}/Family\ Diagram.xcarchive \
          -xcconfig build/osx/Family-Diagram-Release.xcconfig \
          archive

    - name: Export archive
      run: |
        xcodebuild \
          -verbose \
          -exportArchive \
          -archivePath ${FD_BUILD_DIR}/Family\ Diagram.xcarchive \
          -exportOptionsPlist build/osx/ExportOptions.plist \
          -exportPath $FD_BUILD_DIR/Export

    - name: Verify app
      run: |
        build/osx/Release/Export/Family\ Diagram.app/Contents/MacOS/Family\ Diagram --version

    - name: Prep App Bundle
      run: |
        rm build/osx/Release/Family\ Diagram.app # symlink
        cp -R $FD_BUILD_DIR/Export/Family\ Diagram.app build/osx/Release
        ditto -c -k --keepParent \
            "$FD_BUILD_DIR/Family Diagram.app" \
            "$FD_BUILD_DIR/Family Diagram.zip"

    - name: Uploading for notarization
      run: |
        xcrun notarytool submit \
          --key "${FD_BUILD_AC_AUTH_KEY_FPATH}" \
          --key-id "${FD_BUILD_AC_AUTH_KEY_ID}" \
          --issuer "${FD_BUILD_AC_AUTH_KEY_ISSUER}" \
          --timeout 2h \
          --wait --progress \
          --output-format plist \
          "$FD_BUILD_DIR/Family Diagram.zip" \
          > ${FD_BUILD_DIR}/NotaryResults.plist || true
        
        REQUEST_STATUS=$(/usr/libexec/PlistBuddy -c "Print :status" build/osx/Release/NotaryResults.plist)
        if [ "$REQUEST_STATUS" != "Accepted" ]; then
            REQUEST_UUID=$(/usr/libexec/PlistBuddy -c "Print :id" ${FD_BUILD_DIR}/NotaryResults.plist)
            echo "PKS *** Notarizing failed, fetching developer log for Request ID: ${REQUEST_UUID}..."
            xcrun notarytool log $REQUEST_UUID \
                --key "${FD_BUILD_AC_AUTH_KEY_FPATH}" \
                --key-id "${FD_BUILD_AC_AUTH_KEY_ID}" \
                --issuer "${FD_BUILD_AC_AUTH_KEY_ISSUER}" 
            exit 1
        fi

    - name: Stapling app bundle
      run: |
        xcrun stapler staple "${FD_BUILD_DIR}/Family Diagram.app"

    - name: Unmount existing DMG
      run: |
        hdiutil detach /Volumes/"Family Diagram" || true

    - name: Create DMG
      run: |
        cd build/osx
        ls -la ./Release
        hdiutil info
        # copy to a tmp folder to avoid "hdiutil: Resource busy"
        mkdir -p /tmp/Family-Diagram/
        cp -R ./Release/Family\ Diagram.app /tmp/Family-Diagram/
        cp -R ../osx-config/PKDiagram-Filled.icns /tmp/Family-Diagram/
        cp -R ../osx-config/DMG-Background.png /tmp/Family-Diagram/
        create-dmg \
          --volname "Family Diagram" \
          --volicon "PKDiagram-Filled.icns" \
          --background "DMG-Background.png" \
          --window-pos 200 200 \
          --window-size 800 600 \
          --icon-size 128 \
          --icon "Family Diagram.app" 200 350 \
          --hide-extension "Family Diagram.app" \
          --app-drop-link 600 350 \
          --no-internet-enable \
          --hdiutil-verbose \
          "./Release/Family Diagram.dmg" \
          "/tmp/Family-Diagram/"

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: familydiagram-macos
        path: build/osx/Release/Family Diagram.dmg

  test-macos:
    runs-on: ${{ matrix.os }}
    needs: [build-osx]
    strategy:
      matrix:
        os: [macos-13, macos-14, macos-15]
    steps:
      - name: Download macOS Artifact
        uses: actions/download-artifact@v4
        with:
          name: familydiagram-macos
          path: ./artifact

      - name: Mount DMG
        run: |
          hdiutil attach "./artifact/Family Diagram.dmg" -quiet -mountpoint /Volumes/"Family Diagram"

      - name: Test App Execution
        run: |
          /Volumes/"Family Diagram"/"Family Diagram.app"/Contents/MacOS/"Family Diagram" --version
          if [ $? -ne 0 ]; then
            echo "App failed to execute with --version"
            exit 1
          fi

      - name: Test Error Logging
        run: |
          /Volumes/"Family Diagram"/"Family Diagram.app"/Contents/MacOS/"Family Diagram" --test-error-logging || true
          if [ ! -f ~/Desktop/startup_errors.txt ]; then
            echo "startup_errors.txt was not created on Desktop"
            exit 1
          fi
          if ! grep -q "Test error logging to startup_errors.txt" ~/Desktop/startup_errors.txt; then
            echo "startup_errors.txt does not contain expected error message"
            cat ~/Desktop/startup_errors.txt
            exit 1
          fi
          echo "✓ Error logging test passed"
          rm ~/Desktop/startup_errors.txt

      - name: Unmount DMG
        if: always()
        run: |
          hdiutil detach /Volumes/"Family Diagram" || true

  build-windows:
    runs-on: windows-2022
    needs: [setup]
  
    steps:

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true
  
      - name: Set up Python 3.11.6
        uses: actions/setup-python@v5
        with:
          python-version: 3.11.6
          
      - name: Set up virtual env
        run: |
          pip install pipenv
          mkdir .venv
          pipenv --clear
          mkdir .\pipenv_cache
          set PIPENV_CACHE_DIR=%GITHUB_WORKSPACE%\pipenv_cache
          pipenv install --dev
        shell: cmd
  
      - name: Install Qt
        run: |
          pipenv install aqtinstall
          pipenv run aqt install-qt windows desktop 5.15.2 win64_msvc2019_64 --outputdir C:\Qt --archives qtbase qtdeclarative qtgraphicaleffects qtimageformats qtquickcontrols qtquickcontrols2 qttools qtwinextras
        shell: cmd
        
      - name: Setup MSVC (x64)
        uses: microsoft/setup-msbuild@v2
        with:
          msbuild-architecture: x64

      - name: Check for v142 toolset availability
        id: check-v142
        run: |
          $v142Available = $false
          $vs2019Available = $false
          
          # Check for VS 2019 Community installation
          $vs2019Path = "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Auxiliary\Build\vcvars64.bat"
          if (Test-Path $vs2019Path) {
            $vs2019Available = $true
            Write-Output "Found VS 2019 Community installation"
          } else {
            Write-Output "VS 2019 Community not found"
          }
          
          # Check for v142 toolset in VS 2022
          $toolsetPath = "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC"
          if (Test-Path $toolsetPath) {
            $versions = Get-ChildItem $toolsetPath | Where-Object { $_.Name -like "14.29*" }
            if ($versions.Count -gt 0) {
              $v142Available = $true
              Write-Output "Found v142 toolset in VS 2022: $($versions[0].Name)"
            }
          }
          
          echo "v142_available=$v142Available" >> $env:GITHUB_OUTPUT
          echo "vs2019_available=$vs2019Available" >> $env:GITHUB_OUTPUT
        shell: pwsh

      - name: Install v142 Build Tools if not available
        if: steps.check-v142.outputs.v142_available == 'False' && steps.check-v142.outputs.vs2019_available == 'False'
        run: |
          Write-Output "v142 toolset not found and VS 2019 not available, installing v142 into VS 2022..."
          & "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vs_installer.exe" modify `
            --installPath "C:\Program Files\Microsoft Visual Studio\2022\Enterprise" `
            --add Microsoft.VisualStudio.Component.VC.14.29.16.11.x86.x64 `
            --add Microsoft.VisualStudio.Component.VC.14.29.16.11.MFC `
            --quiet --norestart --wait
        shell: pwsh

      - name: Setup VS Developer Command Prompt with v142 Toolset (MSVC 19.2x)
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64
          vsversion: ${{ steps.check-v142.outputs.vs2019_available == 'True' && '2019' || '2022' }}
          toolset: 14.29

      - name: Override VisualStudioVersion for pyqtdeploy compatibility
        run: |
          Write-Output "Current VisualStudioVersion: $env:VisualStudioVersion"
          $vs2019Available = "${{ steps.check-v142.outputs.vs2019_available }}"
          if ($vs2019Available -eq "True") {
            Write-Output "Using VS 2019 - VisualStudioVersion should already be 16.0"
          } else {
            Write-Output "Using VS 2022 - overriding VisualStudioVersion to 16.0 for pyqtdeploy compatibility"
            echo "VisualStudioVersion=16.0" >> $env:GITHUB_ENV
            $env:VisualStudioVersion = "16.0"
          }
          Write-Output "Final VisualStudioVersion: $env:VisualStudioVersion"
        shell: pwsh

      - name: Verify v142 compiler and environment setup
        run: |
          Write-Output "=== Compiler Version ==="
          cl.exe 2>&1 | findstr "Version"
          if ($LASTEXITCODE -ne 0) {
            Write-Error "MSVC compiler not found or not working"
            exit 1
          }
          Write-Output ""
          Write-Output "=== Environment Variables ==="
          Write-Output "VisualStudioVersion: $env:VisualStudioVersion"
          Write-Output "VCToolsVersion: $env:VCToolsVersion"
          Write-Output "VSCMD_ARG_TGT_ARCH: $env:VSCMD_ARG_TGT_ARCH"
          Write-Output ""
          Write-Output "MSVC v142 environment setup successful for pyqtdeploy"
        shell: pwsh

      - name: Setup _pkdiagram caching
        id: cache-_pkdiagram
        uses: actions/cache@v4
        with:
          path: |
            _pkdiagram/build
          key: _pkdiagram-${{ runner.os }}-${{ hashFiles('./_pkdiagram/sip/*.sip', './_pkdiagram/*.h', './_pkdiagram/*.cpp') }}-3.11.6
      
      - name: sip-build for _pkdiagram
        if: steps.cache-_pkdiagram.outputs.cache-hit != 'true'
        run: |
          set PATH=C:\Qt\5.15.2\msvc2019_64\bin;%PATH%
          qmake --version
          cd _pkdiagram
          dir build\_pkdiagram
          REM mkdir build\_pkdiagram\release
          pipenv run sip-build --no-compile
          moc -o build\_pkdiagram\moc_unsafearea.cpp unsafearea.h
          moc -o build\_pkdiagram\moc__pkdiagram.cpp _pkdiagram.h
        shell: cmd
      
      - name: Setup sysroot caching
        id: cache-sysroot
        uses: actions/cache@v4
        with:
          path: sysroot/sysroot-win-64
          key: sysroot-win-64-5.15.16--3.11.6
          # key: sysroot-${{ runner.os }}-${{ hashFiles('./sysroot/sysroot.toml') }}
  
      # The moc files are required by the sysroot plugin as well as the build plugin
      - name: Build sysroot
        if: steps.cache-sysroot.outputs.cache-hit != 'true'
        run: |
          set PATH=C:\Qt\5.15.2\msvc2019_64\bin;%PATH%
          cl.exe /? || echo "MSVC compiler not found"
          echo "Downloading https://download.qt.io/official_releases/qt/5.15/5.15.16/single/qt-everywhere-opensource-src-5.15.16.tar.xz"
          curl -L "https://download.qt.io/official_releases/qt/5.15/5.15.16/single/qt-everywhere-opensource-src-5.15.16.tar.xz" -o "sysroot/qt-everywhere-src-5.15.16.tar.xz"

          echo "Downloading https://files.pythonhosted.org/packages/0e/07/c9ed0bd428df6f87183fca565a79fee19fa7c88c7f00a7f011ab4379e77a/PyQt5-5.15.11.tar.gz"
          curl -L "https://files.pythonhosted.org/packages/0e/07/c9ed0bd428df6f87183fca565a79fee19fa7c88c7f00a7f011ab4379e77a/PyQt5-5.15.11.tar.gz" -o "sysroot/PyQt5-5.15.11.tar.gz"

          REM powershell -Command "Invoke-WebRequest 'https://download.qt.io/official_releases/qt/5.15/5.15.16/single/qt-everywhere-opensource-src-5.15.16.tar.xz' -OutFile 'sysroot/qt-everywhere-src-5.15.16.tar.xz'"
          REM powershell -Command "Invoke-WebRequest 'https://files.pythonhosted.org/packages/0e/07/c9ed0bd428df6f87183fca565a79fee19fa7c88c7f00a7f011ab4379e77a/PyQt5-5.15.11.tar.gz' -OutFile 'sysroot/PyQt5-5.15.11.tar.gz'"

          cd _pkdiagram
          dir build\_pkdiagram
          REM mkdir build\_pkdiagram
          moc -o build\_pkdiagram\moc_unsafearea.cpp unsafearea.h
          moc -o build\_pkdiagram\moc__pkdiagram.cpp _pkdiagram.h
          cd ..
          pipenv run pip list
          pipenv run pyqtdeploy-sysroot --verbose sysroot/sysroot.toml
        shell: cmd

      - uses: actions/cache/save@v4
        if: steps.cache-sysroot.outputs.cache-hit != 'true'
        with:
          path: sysroot/sysroot-win-64
          key: sysroot-win-64-5.15.16--3.11.6
  
      - name: Write build config
        run: |
          pipenv run python bin\update_build_info.py
        shell: cmd

      # Write these in case sysroot-build did not run
      - name: (Re-)write _pkdiagram moc files
        run: |
          set PATH=C:\Qt\5.15.2\msvc2019_64\bin;%PATH%
          cd _pkdiagram
          REM if not exist build\_pkdiagram\moc_unsafearea.cpp (
          REM  mkdir build\_pkdiagram
          REM )
          if not exist build\_pkdiagram\moc_unsafearea.cpp (
              moc -o build\_pkdiagram\moc_unsafearea.cpp unsafearea.h
          )
          if not exist build\_pkdiagram\moc__pkdiagram.cpp (
            moc -o build\_pkdiagram\moc__pkdiagram.cpp _pkdiagram.h
          )
        shell: cmd

      - name: pyqtdeploy-build
        run: |
          set PYTHONPATH=%cd%\lib\site-packages
          pipenv run pyqtdeploy-build --verbose --resources 12 --build-dir build\\win32 --target win-64 familydiagram.pdt
          copy build\common-config\* build\win32\
          copy build\win32-config\* build\win32\
        shell: cmd
  
      - name: qmake
        run: |
          set PATH=%cd%\sysroot\sysroot-win-64\Qt\bin;%PATH%
          cd build\win32
          qmake -tp vc "CONFIG-=debug" "CONFIG+=release" "CONFIG+=beta"
        shell: cmd # has to be shell or qmake won't work
  
      - name: Build
        run: |
          cl.exe /? || echo "MSVC compiler not found"
          echo on
          cd build\win32
          msbuild /p:Configuration=Release /m "Family Diagram.vcxproj"
        shell: cmd
  
      - name: Compress build
        run: |
          cd build\win32\Release
          if not exist "Family Diagram.exe" (echo "Executable not built" && exit /b 1)
          7z a -tzip "Family Diagram.zip" "Family Diagram.exe"
        shell: cmd
          
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: familydiagram-windows
          path: build\win32\Release\Family Diagram.zip
  
  test-windows:
    runs-on: ${{ matrix.os }}
    needs: [setup, build-windows]
    strategy:
      matrix:
        os: [windows-2022]
    steps:
      - name: Download Windows Artifact
        uses: actions/download-artifact@v4
        with:
          name: familydiagram-windows
          path: ./artifact

      - name: Unzip Artifact
        run: |
          Expand-Archive -Path ./artifact/'Family Diagram.zip' -DestinationPath ./build
        shell: pwsh

      - name: Test EXE Execution
        run: |
          Write-Host "Testing Windows executable..."

          # Try to run the executable with --version flag
          # Note: Windows GUI apps don't have console output by default
          $process = Start-Process -FilePath "./build/Family Diagram.exe" -ArgumentList "--version" -Wait -PassThru -NoNewWindow
          $exitCode = $process.ExitCode

          Write-Host "Exit code: $exitCode"

          # For Windows, we just check that the executable runs and exits
          # The version output issue will be fixed in the application code
          if ($exitCode -eq 0) {
            Write-Host "✓ Executable runs successfully"
          } else {
            Write-Host "✗ Executable failed with exit code: $exitCode"
            exit 1
          }
        shell: pwsh

      - name: Test Error Logging
        run: |
          Write-Host "Testing error logging..."

          $process = Start-Process -FilePath "./build/Family Diagram.exe" -ArgumentList "--test-error-logging" -Wait -PassThru -NoNewWindow

          $desktopPath = [Environment]::GetFolderPath("Desktop")
          $errorLogPath = Join-Path $desktopPath "startup_errors.txt"

          if (-not (Test-Path $errorLogPath)) {
            Write-Host "✗ startup_errors.txt was not created on Desktop"
            exit 1
          }

          $logContent = Get-Content $errorLogPath -Raw
          if ($logContent -notmatch "Test error logging to startup_errors.txt") {
            Write-Host "✗ startup_errors.txt does not contain expected error message"
            Write-Host $logContent
            exit 1
          }

          Write-Host "✓ Error logging test passed"
          Remove-Item $errorLogPath
        shell: pwsh

  publish:
    runs-on: ubuntu-24.04
    needs: [setup, test-macos, test-windows]
    if: ${{ !inputs.skip_release }}
    permissions:
      contents: write
    steps:

    - uses: actions/download-artifact@v4

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.setup.outputs.version }}
        release_name: ${{ needs.setup.outputs.version }}
        draft: false
        prerelease: true
        body: ${{ github.event.inputs.release_notes }}

    - name: Upload macOS Build
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: familydiagram-macos/Family Diagram.dmg
        # asset_name: Family Diagram ${{ needs.setup.outputs.version }}.dmg
        asset_name: Family Diagram.dmg
        asset_content_type: application/x-apple-diskimage

    - name: Upload Windows Build
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: familydiagram-windows/Family Diagram.zip
        # asset_name: Family Diagram ${{ needs.setup.outputs.version }}.zip
        asset_name: Family Diagram.zip
        asset_content_type: application/zip

  update-appcast:
    runs-on: ubuntu-24.04
    needs: publish
    if: ${{ !inputs.skip_release }}
      
    steps:

      - name: Check out repository
        uses: actions/checkout@v3

      - name: Generate Sparkle appcast xml
        run: |
            python bin/github_releases_2_appcast.py

      - name: Push appcast.xml to familydiagram.com/appcast.xml
        env:
            FAMILYDIAGRAM_COM_SSH_PRIVATE_KEY: ${{ secrets.FAMILYDIAGRAM_COM_SSH_PRIVATE_KEY }}
        run: |
            echo "${FAMILYDIAGRAM_COM_SSH_PRIVATE_KEY}" > private_key
            chmod 600 private_key
            mkdir -p ~/.ssh
            ssh-keyscan -H familydiagram.com >> ~/.ssh/known_hosts
            scp -i private_key *.xml patrick@familydiagram.com:/var/www/html/
            rm private_key