name: Release

on:
  push:
    branches:
      - master
  workflow_dispatch:

env:
  TWINE_REPOSITORY_URL: "${{ secrets.TWINE_REPOSITORY_URL }}"
  TWINE_USERNAME: "${{ secrets.TWINE_USERNAME }}"
  TWINE_PASSWORD: "${{ secrets.TWINE_PASSWORD }}"
  FD_BUILD_DIR: ${{ github.workspace }}/build/osx/Release
  FD_BUILD_KEYCHAIN_NAME: ${{ github.workspace }}/build/osx/Release/build.keychain-db
  FD_BUILD_PROVISIONING_PROFILE_FPATH: ${{ github.workspace }}/build/osx/Release/FD.provisionprofile
  FD_BUILD_CERTIFICATE_FPATH: ${{ github.workspace }}/build/osx/Release/FD_certificate.crt
  FD_BUILD_PRIVATE_KEY_FPATH: ${{ github.workspace }}/build/osx/Release/FD_certificate.pem
  FD_BUILD_AC_AUTH_KEY_FPATH: ${{ github.workspace }}/build/osx/Release/AuthKey_${{ secrets.FD_BUILD_AC_AUTH_KEY_ID }}.p8
  FD_APP_PATH: ${{ github.workspace }}/build/osx/Release/Family\ Diagram.app
  FD_BUILD_APPLE_ID: "${{ secrets.FD_BUILD_APPLE_ID }}"
  FD_BUILD_APPLE_ID_PASSWORD: "${{ secrets.FD_BUILD_APPLE_ID_PASSWORD }}"
  FD_BUILD_PROVISIONING_PROFILE_BASE64: "${{ secrets.FD_BUILD_PROVISIONING_PROFILE_BASE64 }}"
  FD_BUILD_CERTIFICATE_BASE64: "${{ secrets.FD_BUILD_CERTIFICATE_BASE64 }}"
  FD_BUILD_PRIVATE_KEY_BASE64: "${{ secrets.FD_BUILD_PRIVATE_KEY_BASE64 }}"
  FD_BUILD_CERTIFICATE_PASSWORD: "${{ secrets.FD_BUILD_CERTIFICATE_PASSWORD }}"
  FD_BUILD_AC_AUTH_KEY_ID: "${{ secrets.FD_BUILD_AC_AUTH_KEY_ID }}"
  FD_BUILD_AC_AUTH_KEY_BASE64: "${{ secrets.FD_BUILD_AC_AUTH_KEY_BASE64 }}"
  FD_BUILD_AC_AUTH_KEY_ISSUER: "${{ secrets.FD_BUILD_AC_AUTH_KEY_ISSUER }}"
  FD_BUILD_PEPPER: "${{ secrets.FD_BUILD_PEPPER }}"
  FD_BUILD_BUGSNAG_API_KEY: "${{ secrets.FD_BUILD_BUGSNAG_API_KEY }}"

jobs:

  setup:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    steps:

    - uses: actions/checkout@v4

    - name: Get Version
      id: get-version
      run: |
        echo "version=`python -c "import sys; sys.path.insert(0, './pkdiagram'); import version; print(version.VERSION)"`" >> $GITHUB_OUTPUT

  build-osx:
    # x86 w/ python-3.12.5
    # https://github.com/actions/runner-images/blob/main/images/macos/macos-14-Readme.md
    runs-on: macos-12
    needs: [setup]

    steps:

    - uses: actions/checkout@v4
      with:
        submodules: true

    # # Will provide an SSH command in the logs that you can use to access the runner.
    # - name: Setup tmate session
    #   uses: mxschmitt/action-tmate@v3        

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.10.4
        # cache: 'pipenv'

    - run: |
        pip install pipenv
        mkdir .venv
        pipenv --clear
        pipenv install --dev  --skip-lock --verbose

    # It is faster to install homebrew than to restore from cache
    - name: brew install qt@5 create-dmg
      run: |
        brew install qt@5 create-dmg

    ## App
    
    - name: Setup _pkdiagram caching
      id: cache-_pkdiagram
      uses: actions/cache@v4
      with:
        path: |
          pkdiagram/_pkdiagram/build
        key: _pkdiagram-${{ runner.os }}-${{ hashFiles('./pkdiagram/_pkdiagram/sip/*.sip', './pkdiagram/_pkdiagram/*.h', './pkdiagram/_pkdiagram/*.cpp') }}
    
    - name: sip-build for _pkdiagram
      if: steps.cache-_pkdiagram.outputs.cache-hit != 'true'
      run: |
        export PATH="/usr/local/opt/qt@5/bin:${PATH}"
        which qmake
        cd pkdiagram/_pkdiagram
        pipenv run sip-build --no-compile
        moc -o build/_pkdiagram/moc_unsafearea.cpp unsafearea.h
        moc -o build/_pkdiagram/moc__pkdiagram.cpp _pkdiagram.h

    - name: Download zlib source
      run: |
        wget -L "https://www.zlib.net/fossils/zlib-1.2.11.tar.gz" -P ./sysroot/

    - name: Setup sysroot caching
      id: cache-sysroot
      uses: actions/cache@v4
      with:
        path: ./sysroot/sysroot-macos-64
        key: sysroot-macOS
        # key: sysroot-${{ runner.os }}-${{ hashFiles('./sysroot/sysroot.toml') }}

    - name: Build sysroot
      if: steps.cache-sysroot.outputs.cache-hit != 'true'
      run: |
        export PATH="/usr/local/opt/qt@5/bin:${PATH}"
        pipenv run pyqtdeploy-sysroot --target macos-64 --verbose sysroot/sysroot.toml

    - uses: actions/cache/save@v4
      if: steps.cache-sysroot.outputs.cache-hit != 'true'
      with:
        path: ./sysroot/sysroot-macos-64
        key: sysroot-macOS

    - name: Write build config
      run: |
        export PATH="`pwd`/sysroot/sysroot-macos-64/Qt/bin:${PATH}"
        pipenv run python bin/update_build_info.py
        pipenv run pyqtdeploy-build --verbose  --resources 12 --target macos-64 --build-dir build/osx familydiagram.pdt
        rsync -avzq build/common-config/* build/osx
        rsync -avzq build/osx-config/* build/osx

    - name: qmake
      run: |
        export PATH="`pwd`/sysroot/sysroot-macos-64/Qt/bin:${PATH}"
        cd build/osx
        qmake -spec macx-xcode CONFIG+=no_autoqmake CONFIG+=debug CONFIG-=release CONFIG+=beta

    - name: Setup provisioning profile
      run: |
        pipenv run ./bin/setup_provisioning_profile.sh

    - name: Update xcode project to new build system
      run: |
        python3 bin/fixup_xcodeproj_workspace.py

    - name: Qt Preprocess
      run: |
        xcodebuild \
          -project build/osx/Family\ Diagram.xcodeproj \
          -target "Qt Preprocess" \
          -configuration Release

    - name: Build App
      run: |
        pipenv run xcodebuild \
          -project build/osx/Family\ Diagram.xcodeproj \
          -scheme "Family Diagram" \
          -configuration Release \
          -archivePath ${FD_BUILD_DIR}/Family\ Diagram.xcarchive \
          -xcconfig build/osx/Family-Diagram-Release.xcconfig \
          archive

    - name: Export archive
      run: |
        xcodebuild \
          -verbose \
          -exportArchive \
          -archivePath ${FD_BUILD_DIR}/Family\ Diagram.xcarchive \
          -exportOptionsPlist build/osx/ExportOptions.plist \
          -exportPath $FD_BUILD_DIR/Export

    - name: Verify app
      run: |
        build/osx/Release/Export/Family\ Diagram.app/Contents/MacOS/Family\ Diagram --version

    - name: Prep App Bundle
      run: |
        rm build/osx/Release/Family\ Diagram.app # symlink
        cp -R $FD_BUILD_DIR/Export/Family\ Diagram.app build/osx/Release
        ditto -c -k --keepParent \
            "$FD_BUILD_DIR/Family Diagram.app" \
            "$FD_BUILD_DIR/Family Diagram.zip"

    - name: Uploading for notarization
      run: |
        xcrun notarytool submit \
          --key "${FD_BUILD_AC_AUTH_KEY_FPATH}" \
          --key-id "${FD_BUILD_AC_AUTH_KEY_ID}" \
          --issuer "${FD_BUILD_AC_AUTH_KEY_ISSUER}" \
          --timeout 2h \
          --wait --progress \
          --output-format plist \
          "$FD_BUILD_DIR/Family Diagram.zip" \
          > ${FD_BUILD_DIR}/NotaryResults.plist || true
        
        REQUEST_STATUS=$(/usr/libexec/PlistBuddy -c "Print :status" build/osx/Release/NotaryResults.plist)
        if [ "$REQUEST_STATUS" != "Accepted" ]; then
            REQUEST_UUID=$(/usr/libexec/PlistBuddy -c "Print :id" ${FD_BUILD_DIR}/NotaryResults.plist)
            echo "PKS *** Notarizing failed, fetching developer log for Request ID: ${REQUEST_UUID}..."
            xcrun notarytool log $REQUEST_UUID \
                --key "${FD_BUILD_AC_AUTH_KEY_FPATH}" \
                --key-id "${FD_BUILD_AC_AUTH_KEY_ID}" \
                --issuer "${FD_BUILD_AC_AUTH_KEY_ISSUER}" 
            exit 1
        fi

    - name: Stapling app bundle
      run: |
        xcrun stapler staple "${FD_BUILD_DIR}/Family Diagram.app"

    - name: Create DMG
      run: |
        cd build/osx
        create-dmg \
          --volname "Family Diagram" \
          --volicon "PKDiagram-Filled.icns" \
          --background "DMG-Background.png" \
          --window-pos 200 200 \
          --window-size 800 600 \
          --icon-size 128 \
          --icon "Family Diagram.app" 200 350 \
          --hide-extension "Family Diagram.app" \
          --app-drop-link 600 350 \
          --no-internet-enable \
          "Release/Family Diagram.dmg" \
          "Release/"

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: familydiagram-macos
        path: build/osx/Release/Family Diagram.dmg

  build-windows:
    runs-on: windows-2019
    needs: [setup]
  
    steps:

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true
  
      - name: Set up Python 3.10.4
        uses: actions/setup-python@v5
        with:
          python-version: 3.10.4
          # cache: 'pipenv'
      - run: |
          pip install pipenv
          mkdir .venv
          pipenv --clear
          pipenv install --dev --skip-lock --verbose
  
      - name: Install Qt
        run: |
          pipenv install aqtinstall
          pipenv run aqt install-qt windows desktop 5.15.2 win64_msvc2019_64 --outputdir C:\Qt --archives qtbase qtdeclarative qtgraphicaleffects qtimageformats qtquickcontrols qtquickcontrols2 qttools qtwinextras
        
      - name: Setup _pkdiagram caching
        id: cache-_pkdiagram
        uses: actions/cache@v4
        with:
          path: |
            pkdiagram/_pkdiagram/build
          key: _pkdiagram-${{ runner.os }}-${{ hashFiles('./pkdiagram/_pkdiagram/sip/*.sip', './pkdiagram/_pkdiagram/*.h', './pkdiagram/_pkdiagram/*.cpp') }}
      
      - name: sip-build for _pkdiagram
        if: steps.cache-_pkdiagram.outputs.cache-hit != 'true'
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          set PATH=C:\Qt\5.15.2\msvc2019_64\bin;%PATH%
          qmake --version
          cd pkdiagram\_pkdiagram
          pipenv run sip-build --no-compile
          moc -o build\_pkdiagram\moc_unsafearea.cpp unsafearea.h
          moc -o build\_pkdiagram\moc__pkdiagram.cpp _pkdiagram.h
        shell: cmd
  
      - name: Setup sysroot caching
        id: cache-sysroot
        uses: actions/cache@v4
        with:
          path: sysroot/sysroot-win-64
          key: sysroot-win-64
          # key: sysroot-${{ runner.os }}-${{ hashFiles('./sysroot/sysroot.toml') }}
  
      - name: Build sysroot
        if: steps.cache-sysroot.outputs.cache-hit != 'true'
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          set PATH=C:\Qt\5.15.2\msvc2019_64\bin;%PATH%
          cd pkdiagram\_pkdiagram
          dir build\_pkdiagram\release
          mkdir build\_pkdiagram\release
          # These are required by the sysroot plugin as well as the build plugin
          moc -o build\_pkdiagram\release\moc_unsafearea.cpp unsafearea.h
          moc -o build\_pkdiagram\release\moc__pkdiagram.cpp _pkdiagram.h
          cd ..\..
          pipenv run pyqtdeploy-sysroot --verbose sysroot/sysroot.toml
        shell: cmd

      - uses: actions/cache/save@v4
        if: steps.cache-sysroot.outputs.cache-hit != 'true'
        with:
          path: sysroot/sysroot-win-64
          key: sysroot-win-64
  
      - name: Write build config
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          pipenv run python bin\update_build_info.py
        shell: cmd

      - name: (Re-)write _pkdiagram moc files
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          cd pkdiagram\_pkdiagram
          # Write these in case sysroot-build did not run
          if not exist build\_pkdiagram\moc_unsafearea.cpp (
              moc -o build\_pkdiagram\moc_unsafearea.cpp unsafearea.h
          )
          if not exist build\_pkdiagram\moc__pkdiagram.cpp (
            moc -o build\_pkdiagram\moc__pkdiagram.cpp _pkdiagram.h
          )
        shell: cmd

      - name: pyqtdeploy-build
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          set PYTHONPATH=%cd%\lib\site-packages
          pipenv run pyqtdeploy-build --verbose --resources 12 --build-dir build\\win32 --target win-64 familydiagram.pdt
          copy build\common-config\* build\win32\
          copy build\win32-config\* build\win32\
        shell: cmd
  
      - name: qmake
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          set PATH=%cd%\sysroot\sysroot-win-64\Qt\bin;%PATH%
          cd build\win32
          qmake -tp vc "CONFIG-=debug" "CONFIG+=release" "CONFIG+=beta"
        shell: cmd # has to be shell or qmake won't work
  
      - name: Build
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          echo on
          cd build\win32
          msbuild /p:Configuration=Release "Family Diagram.vcxproj"
        shell: cmd
  
      - name: Zip build
        run: |
          7z a -tzip "build\win32\Release\Family Diagram.zip" "build\win32\Release\Family Diagram.exe"
        shell: cmd
          
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: familydiagram-windows
          path: build\win32\Release\Family Diagram.zip
  
  publish:
    runs-on: ubuntu-latest
    needs: [setup, build-osx, build-windows]
    steps:

    - uses: actions/download-artifact@v4

    - run: |
        echo `pwd`
        ls -lR

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.setup.outputs.version }}
        release_name: ${{ needs.setup.outputs.version }}
        draft: false
        prerelease: false

    - name: Upload macOS Build
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: familydiagram-macos/Family Diagram.dmg
        asset_name: Family Diagram ${{ needs.setup.outputs.version }}.dmg
        asset_content_type: application/x-apple-diskimage

    - name: Upload Windows Build
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: familydiagram-windows/Family Diagram.zip
        asset_name: Family Diagram ${{ needs.setup.outputs.version }}.zip
        asset_content_type: application/zip

  update-appcast:
    runs-on: ubuntu-latest
    needs: publish
    steps:

      - name: Check out repository
        uses: actions/checkout@v3

      - name: Generate appcast.xml
        id: get_release
        run: |
            python bin/github_releases_2_appcast.py

      - name: Push appcast.xml to familydiagram.com/appcast.xml
        env:
            FAMILYDIAGRAM_COM_SSH_PRIVATE_KEY: ${{ secrets.FAMILYDIAGRAM_COM_SSH_PRIVATE_KEY }}
        run: |
            echo "${FAMILYDIAGRAM_COM_SSH_PRIVATE_KEY}" > private_key
            chmod 600 private_key
            mkdir -p ~/.ssh
            ssh-keyscan -H familydiagram.com >> ~/.ssh/known_hosts
            scp -i private_key appcast.xml patrick@familydiagram.com:/var/www/html/appcast.xml
            rm private_key
